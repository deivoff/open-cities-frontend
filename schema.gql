# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AuthRedirect {
    url: String!
}

type AuthResponse {
    token: String!
}

type City {
    _id: ID!
    center: GeometryCoords!
    name: String!
    photo: String!
    url: String!
    zoom: Int!
}

type Geo {
    _id: ID!
    access: UserType!
    author: User!
    createdAt: DateTime!
    geometry: Geometry!
    layer: Layer!
    properties: JSON!
    updatedAt: DateTime!
}

type Geometry {
    coordinates: GeometryCoords!
    type: GeometryType!
}

type GoogleProvider {
    id: String!
    token: String!
}

type Layer {
    _id: ID!
    access: UserType!
    city: String!
    createdAt: DateTime!
    description: String!
    name: String!
    owner: User!
    properties: [JSON!]!
    subscribers: [User!]!
    updatedAt: DateTime!
}

type Mutation {
    authGoogle(code: String!): AuthResponse!
    createGeo(geoInput: GeoInput!): Geo!
    createGeos(geoInput: [GeoInputExtended!]!): Boolean!
    createLayer(layerInput: LayerInput!): Layer!
}

type Query {
    cities: [City!]!
    geos(layerId: ID!): [Geo!]!
    getCity(url: String!): City
    getGoogleOAuthRedirect: AuthRedirect!
    getUsers: [User!]!
    layers(city: String!): [Layer!]!
}

type User {
    _id: ID!
    email: String!
    name: UserName!
    photos: [UserPhoto!]!
    role: UserType!
    social: UserSocial!
}

type UserName {
    familyName: String!
    givenName: String!
}

type UserPhoto {
    url: String!
}

type UserSocial {
    googleProvider: GoogleProvider!
}

enum GeometryType {
    LineString
    MultiLineString
    MultiPoint
    MultiPolygon
    Point
    Polygon
}

enum UserType {
    admin
    researcher
    user
}

input GeoInput {
    geometry: GeometryInput!
    layer: ID!
    properties: JSON!
}

input GeoInputExtended {
    access: UserType!
    author: ID!
    geometry: GeometryInput!
    layer: ID!
    properties: JSON!
}

input GeometryInput {
    coordinates: GeometryCoords!
    type: GeometryType!
}

input LayerInput {
    city: String!
    description: String!
    name: String!
    properties: [JSON!]!
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"Coordinates scalar type"
scalar GeometryCoords
