# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AuthRedirect {
    url: String!
}

type AuthResponse {
    token: String!
}

type City {
    _id: ObjectId!
    map: Map!
    name: String!
    photo: String!
    url: String!
}

type Geo {
    _id: ObjectId!
    createdAt: DateTime!
    geometry: Geometry!
    layer: Layer!
    owner: User!
    properties: JSON!
    updatedAt: DateTime!
}

type Geometry {
    coordinates: GeometryCoords!
    type: GeometryType!
}

type GoogleProvider {
    id: String!
    token: String!
}

type Layer {
    _id: ObjectId!
    access: ACCESS_CODE!
    configuration: JSON!
    createdAt: DateTime!
    description: String!
    name: String!
    owner: User!
    updatedAt: DateTime!
}

type Map {
    _id: ObjectId!
    access: ACCESS_CODE!
    createdAt: DateTime!
    description: String!
    draft: Boolean!
    layers: [Layer!]!
    name: String!
    owner: User!
    settings: MapSettings!
    updatedAt: DateTime!
}

type MapSettings {
    bbox: GeometryCoords!
    zoom: Int!
}

type Mutation {
    authGoogle(code: String!): AuthResponse!
    createGeo(geoInput: GeoInput!): Geo!
    createGeos(geoInput: [GeoInput!]!): [Geo!]!
    createLayer(layerInput: LayerInput!, mapId: ObjectId!): Layer!
    createMap(mapInput: MapInput!, type: AccessType): Map!
}

type Query {
    cities: [City!]!
    city(url: String!): City
    geos(layerId: ObjectId!): [Geo!]!
    getGoogleOAuthRedirect: AuthRedirect!
    layer(layerId: ObjectId!): Layer
    layers(mapId: ObjectId!): [Layer!]!
    map(mapId: ObjectId!): Map
    maps(userId: ObjectId!): [Map!]!
    users: [User!]!
}

type User {
    _id: ObjectId!
    email: String!
    name: UserName!
    photos: [UserPhoto!]!
    role: USER_ROLE!
    social: UserSocial!
}

type UserName {
    familyName: String!
    givenName: String!
}

type UserPhoto {
    url: String!
}

type UserSocial {
    googleProvider: GoogleProvider!
}

enum ACCESS_CODE {
    COMMENT
    COOWNER
    EDIT
    NONE
    OWNER
    VIEW
}

enum AccessType {
    city
    default
}

enum GeometryType {
    LineString
    MultiLineString
    MultiPoint
    MultiPolygon
    Point
    Polygon
}

enum USER_ROLE {
    ADMIN
    RESEARCHER
    USER
}

input GeoInput {
    geometry: GeometryInput!
    layer: ObjectId!
    properties: JSON!
}

input GeometryInput {
    coordinates: GeometryCoords!
    type: GeometryType!
}

input LayerInput {
    configuration: JSON!
    description: String!
    name: String!
}

input MapInput {
    description: String!
    name: String!
    settings: MapSettingInput!
}

input MapSettingInput {
    bbox: GeometryCoords!
    zoom: Int!
}


"Mongo object id scalar type"
scalar ObjectId

"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"Coordinates scalar type"
scalar GeometryCoords
